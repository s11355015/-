{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNaRtF0wwVoETyiWwW4O5Aw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/s11355015/-/blob/main/homework\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "jEwQqs9mVuh8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "outputId": "a1bbde27-f7af-401e-9cd8-47debc39a593"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid character '，' (U+FF0C) (<ipython-input-1-331b48fd4b61>, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-331b48fd4b61>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    //建立I/O控制器，用全域方便學生直接網頁測試\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character '，' (U+FF0C)\n"
          ]
        }
      ],
      "source": [
        "//建立I/O控制器，用全域方便學生直接網頁測試\n",
        "//建立diveWorld => controller\n",
        "class Scenes {\n",
        "    constructor(cols, rows, map) {\n",
        "        this.cols = Number(cols);\n",
        "        this.rows = Number(rows);\n",
        "        this.map = map;\n",
        "        this.now_cols = 0;\n",
        "        this.now_rows = 0;\n",
        "    }\n",
        "    setMap(map) {\n",
        "        this.map = map\n",
        "    }\n",
        "    getMap() {\n",
        "        return this.map\n",
        "    }\n",
        "    getTile(col, row) {\n",
        "        return this.map[Number(row) * this.cols + Number(col)]\n",
        "    }\n",
        "    getIndex(col, row) {\n",
        "        return Number(row) * this.cols + Number(col)\n",
        "    }\n",
        "    getTileByIndex(i) {\n",
        "        return this.map[i]\n",
        "    }\n",
        "    getNowTile() {\n",
        "        return [this.now_cols, this.now_rows]\n",
        "    }\n",
        "    getIndexByPID(pid) {\n",
        "        return this.map.findIndex((e) => {\n",
        "            return e == pid\n",
        "        })\n",
        "    }\n",
        "}\n",
        "class DiveWorld {\n",
        "    constructor(map, preload_json) {\n",
        "        this.app = document.querySelector(\"#dive-app\");\n",
        "        this.loading = document.querySelector(\".loading\");\n",
        "        this.preload_json = preload_json;\n",
        "        this.isInitial = true;\n",
        "        this.reset = false;\n",
        "        this.linkers = [];\n",
        "        this.cache_pids = [];\n",
        "        this.linker_index = 0;\n",
        "        this.pid = map[0];\n",
        "        this.index = 0;\n",
        "        this.scenes = new Scenes(map_col, map_row, map);\n",
        "        this.outputList = this.initOutput();\n",
        "        this.complete_timer = null;\n",
        "        this.init_timer = null;\n",
        "        this.start_timer = null;\n",
        "        this.input_timer = null;\n",
        "        this.defaultCount = 6;\n",
        "        this.init();\n",
        "    }\n",
        "    /**\n",
        "     * get map data . initial map[0]\n",
        "     */\n",
        "    init() {\n",
        "        let _world = this;\n",
        "        window.addEventListener(\"click\", triggerFull, false)\n",
        "        this.nextStage();\n",
        "        this.isInitial = false;\n",
        "        this.fullScreen()\n",
        "\n",
        "        function triggerFull() {\n",
        "            _world.fullScreen();\n",
        "            _world.hideBlock();\n",
        "            _world.start();\n",
        "            _world.hide();\n",
        "            window.removeEventListener(\"click\", triggerFull, false)\n",
        "        }\n",
        "    }\n",
        "    startPreload() {\n",
        "        let pid = (this.isInitial) ? this.scenes.getTileByIndex(0) : this.pid;\n",
        "        let isCustom = this.checkCustomPreload(pid);\n",
        "        if (this.isInitial) {\n",
        "            // first load map[00]\n",
        "            //TODO should refactory\n",
        "            this.initPreload(1)\n",
        "            let linker = this.getLinker();\n",
        "            linker.setProject(pid);\n",
        "        }\n",
        "        if (isCustom) return this.customPreload(pid)\n",
        "        return this.defaultPreload()\n",
        "    }\n",
        "    customPreload(pid) {\n",
        "        if (this.reset) {\n",
        "            this.initPreload(1);\n",
        "            //jump tile\n",
        "            let linker = this.getLinker();\n",
        "            let scenes = this.scenes;\n",
        "            linker.setProject(scenes.getTileByIndex(this.index));\n",
        "        }\n",
        "        let _world = this;\n",
        "        let preloadArray = this.getPreloadArray(pid);\n",
        "        this.cache_pids = preloadArray;\n",
        "        this.cache_index = preloadArray.map((e) => {\n",
        "            return _world.scenes.getIndexByPID(e)\n",
        "        });\n",
        "        const l = preloadArray.length;\n",
        "        this.initPrelaods(l + 2);\n",
        "        try {\n",
        "            for (let i = 0; i < l; i++) {\n",
        "                const _pid = preloadArray[i];\n",
        "                console.log(\"custome prelaod id\" + _pid)\n",
        "                const _i = i + 1;\n",
        "                let linker = this.getLinker(_i);\n",
        "                if (linker) {\n",
        "                    linker.setProject(_pid);\n",
        "                    linker.enableBlock(false);\n",
        "                }\n",
        "            }\n",
        "        } catch (error) {\n",
        "            console.log(\"customPreload error : \" + error);\n",
        "        }\n",
        "    }\n",
        "    //init 4 iframe ,2 => 6\n",
        "    defaultPreload() {\n",
        "        if (this.reset) this.initPreload(1)\n",
        "        this.initPrelaods(this.defaultCount);\n",
        "        let scenes = this.scenes;\n",
        "        let linker = this.getLinker();\n",
        "        if (this.reset) {\n",
        "            //jump tile\n",
        "            linker.setProject(scenes.getTileByIndex(this.index));\n",
        "        }\n",
        "        let preload_array = [\n",
        "            this.index - scenes.cols,\n",
        "            this.index - 1,\n",
        "            this.index + 1,\n",
        "            this.index + scenes.cols\n",
        "        ];\n",
        "        this.cache_index = preload_array;\n",
        "        this.cache_pids = preload_array.map((e) => {\n",
        "            return scenes.getTileByIndex(e)\n",
        "        });\n",
        "        //TODO  fragile\n",
        "        try {\n",
        "            for (let i = 0; i < this.cache_pids.length; i++) {\n",
        "                const pid = this.cache_pids[i];\n",
        "                const _i = i + 1;\n",
        "                let linker = this.getLinker(_i);\n",
        "                if (linker && pid) {\n",
        "                    linker.setProject(pid);\n",
        "                    linker.enableBlock(false);\n",
        "                }\n",
        "            }\n",
        "        } catch (error) {\n",
        "            console.log(\"defaultPreload error : \" + error);\n",
        "        }\n",
        "    }\n",
        "    checkCustomPreload(eid) {\n",
        "        return this.preload_json[eid]\n",
        "    }\n",
        "    getPreloadArray(eid) {\n",
        "        return this.preload_json[eid]\n",
        "    }\n",
        "    initIframe(i) {\n",
        "        let iframe = document.createElement(\"iframe\");\n",
        "        iframe.className = (i == 1) ? \"dive preload\" : \"dive preload dive-hide\";\n",
        "        iframe.setAttribute(\"name\", \"dive\" + i);\n",
        "        return iframe\n",
        "    }\n",
        "    initLinker(i) {\n",
        "        let option = (this.isInitial) ? {} : {\n",
        "            \"watermark\": false\n",
        "        };\n",
        "        const linker = new DiveLinker(\"dive\" + i, option)\n",
        "        this.linkers.push(linker);\n",
        "    }\n",
        "    initPrelaods(count) {\n",
        "        for (let i = 2; i < count; i++) {\n",
        "            this.initPreload(i);\n",
        "        }\n",
        "    }\n",
        "    //just append .. refactory by Fragment  when slowly\n",
        "    initPreload(i) {\n",
        "        this.app.appendChild(this.initIframe(i));\n",
        "        this.initLinker(i);\n",
        "    }\n",
        "    bind(func) {\n",
        "        let world = this;\n",
        "        return function () {\n",
        "            return func.apply(world, arguments)\n",
        "        }\n",
        "    }\n",
        "    bindTimer() {\n",
        "        let _world = this;\n",
        "        let linker = _world.getLinker();\n",
        "        _world.checkTimer(\"complete_timer\");\n",
        "        this.reset = false;\n",
        "        _world.complete_timer = setInterval(() => {\n",
        "            if (!linker.checkComplete()) return\n",
        "            console.warn(\"go next :\" + _world.complete_timer);\n",
        "            clearInterval(_world.complete_timer);\n",
        "            delete _world.complete_timer;\n",
        "            _world.sleep(0.1)\n",
        "                .then(linker.pause())\n",
        "                .then(_world.nextStage())\n",
        "        }, 100);\n",
        "    }\n",
        "    waitInit() {\n",
        "        return new Promise((resolve, reject) => {\n",
        "            let _world = this;\n",
        "            let linker = _world.getLinker();\n",
        "            _world.checkTimer(\"init_timer\");\n",
        "            _world.init_timer = setInterval(() => {\n",
        "                if (!linker.initial) return linker.getIOList()\n",
        "                clearInterval(_world.init_timer)\n",
        "                delete _world.init_timer;\n",
        "                resolve()\n",
        "            }, 100);\n",
        "        });\n",
        "    }\n",
        "    checkTimer(timer) {\n",
        "        let _world = this;\n",
        "        if (_world[timer]) {\n",
        "            clearInterval(_world[timer]);\n",
        "            delete _world[timer];\n",
        "        }\n",
        "    }\n",
        "    waitStart() {\n",
        "        return new Promise((resolve, reject) => {\n",
        "            let _world = this;\n",
        "            let linker = _world.getLinker();\n",
        "            _world.checkTimer(\"start_timer\");\n",
        "            if (this.isInitial) return resolve()\n",
        "            _world.start_timer = setInterval(() => {\n",
        "                console.warn(\"wait start\");\n",
        "                if (linker.checkDiveStatus() !== \"start\") return _world.start()\n",
        "                clearInterval(_world.start_timer);\n",
        "                delete _world.start_timer;\n",
        "                resolve()\n",
        "            }, 100);\n",
        "        });\n",
        "    }\n",
        "    update() {\n",
        "        this.updateOutput();\n",
        "        let next_col = Number(this.get_world_output(col));\n",
        "        let next_row = Number(this.get_world_output(row));\n",
        "        this.udpateScenes(next_col, next_row);\n",
        "        this.updateIndex(next_col, next_row);\n",
        "    }\n",
        "    // fix 20190808\n",
        "    nextStage() {\n",
        "        let _world = this;\n",
        "        if (!this.isInitial) this.update()\n",
        "        if (this.isInitial) _world.fullScreen()\n",
        "        this.startPreload();\n",
        "        (async () => {\n",
        "            await _world.showNext();\n",
        "            await _world.waitInit();\n",
        "            await _world.setInput();\n",
        "            await _world.hideBlock();\n",
        "            await _world.waitStart();\n",
        "            await _world.bindTimer();\n",
        "        })();\n",
        "    }\n",
        "    hideBlock() {\n",
        "        return new Promise((resolve, reject) => {\n",
        "            if (this.isInitial) return resolve()\n",
        "            let linker = this.getLinker();\n",
        "            linker.enableBlock(false);\n",
        "            resolve();\n",
        "        });\n",
        "    }\n",
        "    start() {\n",
        "        let linker = this.getLinker();\n",
        "        linker.start();\n",
        "        this.focusDIVE();\n",
        "    }\n",
        "    /**\n",
        "     * return by i or nowIndex\n",
        "     * @param {number} i\n",
        "     */\n",
        "    getLinker(i) {\n",
        "        return (i) ? this.linkers[i] : this.linkers[0]\n",
        "    }\n",
        "    initOutput() {\n",
        "        let result = {};\n",
        "        outputNames.push(row);\n",
        "        outputNames.push(col);\n",
        "        for (let i = 0; i < outputNames.length; i++) {\n",
        "            const output = outputNames[i];\n",
        "            result[output] = {\n",
        "                name: output,\n",
        "                value: 0\n",
        "            }\n",
        "        }\n",
        "        return result\n",
        "    }\n",
        "    sleep(delay) {\n",
        "        return new Promise((resolve, reject) => {\n",
        "            setTimeout(() => {\n",
        "                resolve();\n",
        "            }, delay * 800);\n",
        "        });\n",
        "    }\n",
        "    /**\n",
        "     * Useless\n",
        "     * @param {Number} next_col\n",
        "     * @param {Number} next_row\n",
        "     */\n",
        "    udpateScenes(next_col, next_row) {\n",
        "        this.scenes.now_cols = next_col;\n",
        "        this.scenes.now_rows = next_row;\n",
        "    }\n",
        "    updateOutput() {\n",
        "        let linker = this.getLinker();\n",
        "        let new_outputs = linker.getOutputList();\n",
        "        let keep_outputs = this.get_world_outputs();\n",
        "        for (const key in new_outputs) {\n",
        "            if (new_outputs.hasOwnProperty(key)) {\n",
        "                const output = new_outputs[key];\n",
        "                if (outputNames.indexOf(output.name) == -1) continue\n",
        "                keep_outputs[output.name][\"value\"] = output.value;\n",
        "            }\n",
        "        }\n",
        "    }\n",
        "    updateIndex(next_col, next_row) {\n",
        "        this.pid = this.scenes.getTile(this.scenes.now_cols, this.scenes.now_rows);\n",
        "        let newIndex = this.scenes.getIndex(this.scenes.now_cols, this.scenes.now_rows);\n",
        "        let _index = this.cache_index.findIndex(function (e) {\n",
        "            return e == newIndex\n",
        "        })\n",
        "        this.linker_index = _index + 1;\n",
        "        this.index = newIndex;\n",
        "        if (_index == -1) {\n",
        "            this.reset = true;\n",
        "        }\n",
        "        this.linkers = this.linkers.filter((e) => {\n",
        "            return e.getProjectID() == this.pid\n",
        "        })\n",
        "        return this.adjustIframe();\n",
        "    }\n",
        "    //TODO need to drop all . here has bug with chrome => iframe event\n",
        "    adjustIframe() {\n",
        "        let _world = this;\n",
        "        let _linker = this.getLinker();\n",
        "        document.querySelectorAll(\"iframe\").forEach((e) => {\n",
        "            if (!_linker || e != _linker.target) e.remove()\n",
        "        })\n",
        "        if (_world.reset) return\n",
        "        _linker.target.setAttribute(\"name\", \"dive1\");\n",
        "        _linker.target.classList.remove(\"preload\");\n",
        "        _linker.enableBlock(false);\n",
        "    }\n",
        "    get_world_outputs() {\n",
        "        return this.outputList\n",
        "    }\n",
        "    get_world_output(name) {\n",
        "        return this.outputList[name].value\n",
        "    }\n",
        "    setInput() {\n",
        "        return new Promise((resolve, reject) => {\n",
        "            if (this.isInitial) return resolve()\n",
        "            let _world = this;\n",
        "            let linker = this.getLinker();\n",
        "            _world.checkTimer(\"input_timer\");\n",
        "            _world.input_timer = setInterval(() => {\n",
        "                if (!linker.initial) return\n",
        "                clearInterval(_world.input_timer);\n",
        "                delete _world.input_timer;\n",
        "                let inputs = linker.getInputList();\n",
        "                let outputList = this.get_world_outputs();\n",
        "                let inputArray = [];\n",
        "                for (const key in inputs) {\n",
        "                    if (inputs.hasOwnProperty(key)) {\n",
        "                        const input = inputs[key];\n",
        "                        if (outputNames.indexOf(input.name) == -1) continue\n",
        "                        let cache_output = outputList[input.name];\n",
        "                        let obj = {\n",
        "                            id: input.id,\n",
        "                            value: cache_output.value\n",
        "                        }\n",
        "                        inputArray.push(obj);\n",
        "                    }\n",
        "                }\n",
        "                linker.setInput(inputArray);\n",
        "                resolve();\n",
        "            }, 100);\n",
        "        });\n",
        "    }\n",
        "    isEmpty(obj) {\n",
        "        for (var key in obj) {\n",
        "            if (obj.hasOwnProperty(key))\n",
        "                return false;\n",
        "        }\n",
        "        return true;\n",
        "    }\n",
        "    /**\n",
        "     * default is loading\n",
        "     * @param {HTMLElement} node\n",
        "     */\n",
        "    hide(node) {\n",
        "        if (!node) return this.loading.classList.add(\"dive-hide\")\n",
        "        node.classList.add(\"dive-hide\")\n",
        "    }\n",
        "    focusDIVE() {\n",
        "        try {\n",
        "            let dom = document.querySelector(\"iframe[name=dive1\");\n",
        "            dom.contentWindow.focus();\n",
        "        } catch (err) {\n",
        "            console.error('Error: Focus DIVE failed!', err);\n",
        "        }\n",
        "    }\n",
        "    /**\n",
        "     * default is loading\n",
        "     * @param {HTMLElement} node\n",
        "     */\n",
        "    show(node) {\n",
        "        if (!node) return this.loading.classList.remove(\"dive-hide\")\n",
        "        node.classList.remove(\"dive-hide\")\n",
        "    }\n",
        "    showNext() {\n",
        "        return new Promise((resolve, reject) => {\n",
        "            let dom = document.querySelector(\"iframe[name=dive1\");\n",
        "            dom.classList.remove(\"dive-hide\");\n",
        "            this.focusDIVE();\n",
        "            resolve();\n",
        "        });\n",
        "    }\n",
        "    fullScreen() {\n",
        "        if (document.fullscreenEnabled ||\n",
        "            document.webkitFullscreenEnabled ||\n",
        "            document.mozFullScreenEnabled ||\n",
        "            document.msFullscreenEnabled) {\n",
        "            // Do fullscreen\n",
        "            if (this.app.requestFullscreen) {\n",
        "                this.app.requestFullscreen();\n",
        "            } else if (this.app.webkitRequestFullscreen) {\n",
        "                this.app.webkitRequestFullscreen();\n",
        "            } else if (this.app.mozRequestFullScreen) {\n",
        "                this.app.mozRequestFullScreen();\n",
        "            } else if (this.app.msRequestFullscreen) {\n",
        "                this.app.msRequestFullscreen();\n",
        "            }\n",
        "        }\n",
        "    }\n",
        "    mobilecheck() {\n",
        "        let check = false;\n",
        "        (function (a) {\n",
        "            if (\n",
        "                /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n",
        "                .test(a) ||\n",
        "                /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n",
        "                .test(a.substr(0, 4))) check = true;\n",
        "        })(navigator.userAgent || navigator.vendor || window.opera);\n",
        "        return check;\n",
        "    };\n",
        "    /**\n",
        "     * shakeHand with diveServer\n",
        "     */\n",
        "    getID() {\n",
        "        const soup_ = '!#%()*+,-./:;=?@[]^_`{|}~' +\n",
        "            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n",
        "        const length = 20;\n",
        "        const soupLength = soup_.length;\n",
        "        const id = [];\n",
        "        for (let i = 0; i < length; i++) {\n",
        "            id[i] = soup_.charAt(Math.random() * soupLength);\n",
        "        }\n",
        "        return id.join('');\n",
        "    }\n",
        "}\n",
        "/***************************************** 以下為自訂參數*****************************************/\n",
        "/**\n",
        " * 要傳遞的輸出屬性名稱，請確保每個屬性在各實驗中都設定好I/O並名稱一致\n",
        " */\n",
        "const outputNames = [\n",
        "    \"map[from]\"\n",
        "];\n",
        "/**\n",
        " * 切換時[範例中進入傳送點時]回傳的地圖[列]\n",
        " * 切換時[範例中進入傳送點時]回傳的地圖[行]\n",
        " */\n",
        "const row = \"row[output]\";\n",
        "const col = \"col[output]\";\n",
        "/***************************以上是I/O屬性設定***************************/\n",
        "\n",
        "/***************************以下是地圖&地圖參數設定***************************/\n",
        "const map_col = 2; //地圖行\n",
        "const map_row = 2; //地圖列\n",
        "const map = [\n",
        "    32576, 32510,\n",
        "    32535, 32426\n",
        "];\n",
        "/**\n",
        " * 「指定預載」\n",
        " * 可設定專案要預載的專案集合，未指定時採用「預設預載」。\n",
        " */\n",
        "const preload_json = {\n",
        "    32576: [32510, 32535, 32426],\n",
        "    32510: [32576, 32535, 32426],\n",
        "    32535: [32576, 32510, 32426],\n",
        "    32426: [32576, 32510, 32535]\n",
        "}\n",
        "/***************************以上為自訂參數***************************/\n",
        "\n",
        "//put global. easy to check.\n",
        "/***********************Code start************************************/\n",
        "const diveWorld = new DiveWorld(map, preload_json);"
      ]
    }
  ]
}